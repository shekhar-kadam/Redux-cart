{"ast":null,"code":"import { cartActions } from \"./cart-slice\";\nimport { uiActions } from \"./ui-slice\";\n\nconst fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch('https://netflix-build-1a97f-default-rtdb.firebaseio.com/cart.json');\n\n      if (!response.ok) {\n        throw new Error(\"Fetching Data From Cart is Failed\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart(cartData));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data failed\"\n      }));\n    }\n\n    ;\n  };\n};\n\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'sending...',\n      message: 'Sending Cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://netflix-build-1a97f-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending Cart data failed\");\n      }\n\n      ;\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success..',\n        message: 'Send Cart data succesfully'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Tec/Desktop/advance_redux/src/store/cart-actions.js"],"names":["cartActions","uiActions","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"mappings":"AAAA,SAASA,WAAT,QAA4B,cAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAGA,MAAMC,aAAa,GAAG,MAAM;AACxB,SAAO,MAAQC,QAAR,IAAsB;AACzB,UAAMC,SAAS,GAAG,YAAY;AAC1B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mEAAF,CAA5B;;AAEA,UAAK,CAACD,QAAQ,CAACE,EAAf,EAAoB;AAChB,cAAM,IAAIC,KAAJ,CAAW,mCAAX,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,aAAOD,IAAP;AACH,KAVD;;AAYA,QAAI;AACA,YAAME,QAAQ,GAAG,MAAMP,SAAS,EAAhC;AACAD,MAAAA,QAAQ,CAACH,WAAW,CAACY,WAAZ,CAAwBD,QAAxB,CAAD,CAAR;AACH,KAHD,CAGE,OAAQE,KAAR,EAAgB;AACdV,MAAAA,QAAQ,CACJF,SAAS,CAACa,gBAAV,CAA4B;AACxBC,QAAAA,MAAM,EAAE,OADgB;AAExBC,QAAAA,KAAK,EAAE,QAFiB;AAGxBC,QAAAA,OAAO,EAAE;AAHe,OAA5B,CADI,CAAR;AAOH;;AAAA;AACJ,GAzBD;AA0BH,CA3BD;;AA6BA,OAAO,MAAMC,YAAY,GAAKC,IAAF,IAAY;AACpC,SAAO,MAAQhB,QAAR,IAAsB;AACzBA,IAAAA,QAAQ,CAAEF,SAAS,CAACa,gBAAV,CAA4B;AAClCC,MAAAA,MAAM,EAAE,SAD0B;AAElCC,MAAAA,KAAK,EAAE,YAF2B;AAGlCC,MAAAA,OAAO,EAAE;AAHyB,KAA5B,CAAF,CAAR;;AAOA,UAAMG,WAAW,GAAG,YAAY;AAC5B,YAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,mEAAF,EAAuE;AAC/Fe,QAAAA,MAAM,EAAE,KADuF;AAE/FC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgBL,IAAhB;AAFyF,OAAvE,CAA5B;;AAKA,UAAK,CAACd,QAAQ,CAACE,EAAf,EAAoB;AAChB,cAAM,IAAIC,KAAJ,CAAW,0BAAX,CAAN;AACH;;AAAA;AACJ,KATD;;AAWA,QAAI;AACA,YAAMY,WAAW,EAAjB;AAEAjB,MAAAA,QAAQ,CAAEF,SAAS,CAACa,gBAAV,CAA4B;AAClCC,QAAAA,MAAM,EAAE,SAD0B;AAElCC,QAAAA,KAAK,EAAE,WAF2B;AAGlCC,QAAAA,OAAO,EAAE;AAHyB,OAA5B,CAAF,CAAR;AAMH,KATD,CASE,OAAQJ,KAAR,EAAgB;AACdV,MAAAA,QAAQ,CACJF,SAAS,CAACa,gBAAV,CAA4B;AACxBC,QAAAA,MAAM,EAAE,OADgB;AAExBC,QAAAA,KAAK,EAAE,QAFiB;AAGxBC,QAAAA,OAAO,EAAE;AAHe,OAA5B,CADI,CAAR;AAOH;AACJ,GArCD;AAsCH,CAvCM","sourcesContent":["import { cartActions } from \"./cart-slice\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\n\r\nconst fetchCartData = () => {\r\n    return async ( dispatch ) => {\r\n        const fetchData = async () => {\r\n            const response = await fetch( 'https://netflix-build-1a97f-default-rtdb.firebaseio.com/cart.json' );\r\n\r\n            if ( !response.ok ) {\r\n                throw new Error( \"Fetching Data From Cart is Failed\" );\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        };\r\n\r\n        try {\r\n            const cartData = await fetchData();\r\n            dispatch(cartActions.replaceCart(cartData))\r\n        } catch ( error ) {\r\n            dispatch(\r\n                uiActions.showNotification( {\r\n                    status: \"error\",\r\n                    title: \"Error!\",\r\n                    message: \"Fetching cart data failed\",\r\n                } )\r\n            );\r\n        };\r\n    };\r\n}\r\n\r\nexport const sendCartData = ( cart ) => {\r\n    return async ( dispatch ) => {\r\n        dispatch( uiActions.showNotification( {\r\n            status: 'pending',\r\n            title: 'sending...',\r\n            message: 'Sending Cart data!'\r\n        } )\r\n        );\r\n        \r\n        const sendRequest = async () => {\r\n            const response = await fetch( 'https://netflix-build-1a97f-default-rtdb.firebaseio.com/cart.json', {\r\n                method: 'PUT',\r\n                body: JSON.stringify( cart ),\r\n            } );\r\n\r\n            if ( !response.ok ) {\r\n                throw new Error( \"Sending Cart data failed\" );\r\n            };\r\n        };\r\n\r\n        try {\r\n            await sendRequest();\r\n\r\n            dispatch( uiActions.showNotification( {\r\n                status: 'success',\r\n                title: 'Success..',\r\n                message: 'Send Cart data succesfully'\r\n            } )\r\n            );\r\n        } catch ( error ) {\r\n            dispatch(\r\n                uiActions.showNotification( {\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'Sending cart data failed!'\r\n                } )\r\n            );\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}