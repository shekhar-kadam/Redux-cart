{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { uiActions } from './ui-slice';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0.\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'sending...',\n      message: 'Sending Cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://netflix-build-1a97f-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending Cart data failed\");\n      }\n\n      ;\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success..',\n        message: 'Send Cart data succesfully'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["C:/Users/Tec/Desktop/advance_redux/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { uiActions } from './ui-slice';\r\n\r\nconst cartSlice = createSlice( {\r\n    name: 'cart',\r\n    initialState: {\r\n        items: [],\r\n        totalQuantity: 0.\r\n    },\r\n    reducers: {\r\n        replaceCart( state, action ) {\r\n            state.totalQuantity = action.payload.totalQuantity;\r\n            state.items = action.payload.items;\r\n        },\r\n        addItemToCart( state, action ) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find( ( item ) => item.id === newItem.id );\r\n            state.totalQuantity++;\r\n            if ( !existingItem ) {\r\n                state.items.push( {\r\n                    id: newItem.id,\r\n                    price: newItem.price,\r\n                    quantity: 1,\r\n                    totalPrice: newItem.price,\r\n                    name: newItem.title\r\n                })\r\n            } else {\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n            }\r\n            \r\n        },\r\n        removeItemFromCart( state, action ) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find( item => item.id === id );\r\n            state.totalQuantity--;\r\n            if ( existingItem.quantity === 1 ) {\r\n                state.items = state.items.filter( item => item.id !== id );\r\n            } else {\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n            }\r\n        }\r\n    }\r\n} );\r\n\r\nconst sendCartData = ( cart ) => {\r\n    return async ( dispatch ) => {\r\n        dispatch( uiActions.showNotification( {\r\n            status: 'pending',\r\n            title: 'sending...',\r\n            message: 'Sending Cart data!'\r\n        } )\r\n        );\r\n        \r\n        const sendRequest = async () => {\r\n            const response = await fetch( 'https://netflix-build-1a97f-default-rtdb.firebaseio.com/cart.json', {\r\n                method: 'PUT',\r\n                body: JSON.stringify( cart ),\r\n            } );\r\n\r\n            if ( !response.ok ) {\r\n                throw new Error( \"Sending Cart data failed\" );\r\n            };\r\n        };\r\n\r\n        try {\r\n            await sendRequest();\r\n\r\n            dispatch( uiActions.showNotification( {\r\n                status: 'success',\r\n                title: 'Success..',\r\n                message: 'Send Cart data succesfully'\r\n            } )\r\n            );\r\n        } catch ( error ) {\r\n            dispatch(\r\n                uiActions.showNotification( {\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'Sending cart data failed!'\r\n                } )\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}